//Aim:To study cryptography and implement RSA algorithm using C, C++, Python programming.



#include <stdio.h>      // Standard I/O functions
#include <stdlib.h>     // Standard library (for memory, conversions, etc.)
#include <math.h>       // Math functions (not used here but commonly included)

// Function to compute greatest common divisor (GCD) using Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {            // Continue until remainder becomes 0
        int temp = b;           // Store current value of b
        b = a % b;              // Compute a mod b
        a = temp;               // Update a to previous value of b
    }
    return a;                   // GCD is the last non-zero remainder
}

// Function to find modular inverse of e mod phi (for private key d)
int modInverse(int e, int phi) {
    for (int d = 1; d < phi; d++) {         // Try values from 1 to phi
        if ((e * d) % phi == 1) {           // Check if (e * d) mod phi == 1
            return d;                       // Return d as the modular inverse
        }
    }
    return -1;                              // Return -1 if no inverse found
}

// Function to compute (base^exp) % mod efficiently
long long int powerMod(long long int base, long long int exp, long long int mod) {
    long long int result = 1;              // Initialize result to 1
    base = base % mod;                     // Reduce base modulo mod

    while (exp > 0) {                      // Repeat while exponent is > 0
        if (exp % 2 == 1) {                // If exponent is odd
            result = (result * base) % mod;  // Multiply result with base
        }
        exp = exp >> 1;                    // Divide exponent by 2
        base = (base * base) % mod;        // Square the base
    }

    return result;                         // Return final result
}

int main() {
    // Choose two prime numbers (these are hardcoded)
    int p = 61, q = 53;                    // Example prime numbers
    int n = p * q;                         // Compute n = p × q
    int phi = (p - 1) * (q - 1);           // Compute phi = (p−1) × (q−1)

    // Choose public exponent e such that 1 < e < phi and gcd(e, phi) = 1
    int e;
    for (e = 2; e < phi; e++) {            // Try values starting from 2
        if (gcd(e, phi) == 1) {            // Ensure e is coprime with phi
            break;                         // Stop when a valid e is found
        }
    }

    // Compute private key d (modular inverse of e mod phi)
    int d = modInverse(e, phi);            // Calculate private key d

    // Display public and private keys
    printf("Public Key: (%d, %d)\n", e, n);    // (e, n) is public key
    printf("Private Key: (%d, %d)\n", d, n);   // (d, n) is private key

    // Ask user to input a numeric message
    int plaintext;
    printf("Enter a numeric message to encrypt: ");  // Prompt for message
    scanf("%d", &plaintext);                         // Read message from user

    // Encrypt the plaintext using public key: ciphertext = plaintext^e mod n
    long long int ciphertext = powerMod(plaintext, e, n);
    printf("Encrypted Message: %lld\n", ciphertext);  // Print encrypted result

    // Decrypt the ciphertext using private key: decrypted = ciphertext^d mod n
    long long int decryptedMessage = powerMod(ciphertext, d, n);
    printf("Decrypted Message: %lld\n", decryptedMessage);  // Print original message

    return 0;  // End of program
}
